.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.49.1.
.TH YQ "1h" "March 2022" "pipx" "User Commands"
.SH NAME
yq \- manual page for yq 2.14.0
.SH SYNOPSIS
.B jq
[\fI\,options\/\fR] \fI\,<jq filter> \/\fR[\fI\,file\/\fR...]
.SH DESCRIPTION
usage: yq [options] <jq filter> [input file...]
.IP
[jq_filter] [files ...]
.PP
yq: Command\-line YAML processor \- jq wrapper for YAML documents
.PP
yq transcodes YAML documents to JSON and passes them to jq.
See https://github.com/kislyuk/yq for more information.
.SS "positional arguments:"
.IP
jq_filter
files
.SS "options:"
.TP
\fB\-h\fR, \fB\-\-help\fR
show this help message and exit
.TP
\fB\-\-yaml\-output\fR, \fB\-\-yml\-output\fR, \fB\-y\fR
Transcode jq JSON output back into YAML and emit it
.TP
\fB\-\-yaml\-roundtrip\fR, \fB\-\-yml\-roundtrip\fR, \fB\-Y\fR
Transcode jq JSON output back into YAML and emit it. Preserve YAML tags and styles by representing them as extra items in their enclosing mappings and sequences while in JSON. This option is incompatible with jq filters that do not expect these extra items.
.TP
\fB\-\-width\fR WIDTH, \fB\-w\fR WIDTH
When using \fB\-\-yaml\-output\fR, specify string wrap width
.TP
\fB\-\-indentless\-lists\fR, \fB\-\-indentless\fR
When using \fB\-\-yaml\-output\fR, indent block style lists (sequences) with 0 spaces instead of 2
.TP
\fB\-\-in\-place\fR, \fB\-i\fR
Edit files in place (no backup \- use caution)
.TP
\fB\-\-version\fR
show program's version number and exit
.PP
jq \- commandline JSON processor [version 1.6]
.IP
jq [options] \fB\-\-args\fR <jq filter> [strings...]
jq [options] \fB\-\-jsonargs\fR <jq filter> [JSON_TEXTS...]
.PP
jq is a tool for processing JSON inputs, applying the given filter to
its JSON text inputs and producing the filter's results as JSON on
standard output.
.PP
The simplest filter is ., which copies jq's input to its output
unmodified (except for formatting, but note that IEEE754 is used
for number representation internally, with all that that implies).
.PP
For more advanced filters see the jq(1) manpage ("man jq")
and/or https://stedolan.github.io/jq
.PP
Example:
.IP
\f(CW$ echo '{"foo": 0}' | jq .\fR
.IP
{
.IP
"foo": 0
.IP
}
.SS "Some of the options include:"
.TP
\fB\-c\fR
compact instead of pretty\-printed output;
.TP
\fB\-n\fR
use `null` as the single input value;
.TP
\fB\-e\fR
set the exit status code based on the output;
.TP
\fB\-s\fR
read (slurp) all inputs into an array; apply filter to it;
.TP
\fB\-r\fR
output raw strings, not JSON texts;
.TP
\fB\-R\fR
read raw strings, not JSON texts;
.TP
\fB\-C\fR
colorize JSON;
.TP
\fB\-M\fR
monochrome (don't colorize JSON);
.TP
\fB\-S\fR
sort keys of objects on output;
.TP
\fB\-\-tab\fR
use tabs for indentation;
.TP
\fB\-\-arg\fR a v
set variable $a to value <v>;
.TP
\fB\-\-argjson\fR a v
set variable $a to JSON value <v>;
.TP
\fB\-\-slurpfile\fR a f
set variable $a to an array of JSON texts read from <f>;
.TP
\fB\-\-rawfile\fR a f
set variable $a to a string consisting of the contents of <f>;
.TP
\fB\-\-args\fR
remaining arguments are string arguments, not files;
.TP
\fB\-\-jsonargs\fR
remaining arguments are JSON arguments, not files;
.TP
\fB\-\-\fR
terminates argument processing;
.PP
Named arguments are also available as $ARGS.named[], while
positional arguments are available as $ARGS.positional[].
.PP
See the manpage for more options.
