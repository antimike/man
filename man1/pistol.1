'\" t
.\"     Title: pistol
.\"    Author: [see the "AUTHOR(S)" section]
.\" Generator: Asciidoctor 2.0.17
.\"      Date: 2022-03-11
.\"    Manual: Pistol
.\"    Source: Pistol
.\"  Language: English
.\"
.TH "PISTOL" "1" "2022-03-11" "Pistol" "Pistol"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH "NAME"
pistol \- General purpose file previewer designed for Ranger, Lf to make scope.sh redundant.
.SH "INTRODUCTION"
.sp
Pistol features native preview support for almost any archive file and text
files along with syntax highlighting.
.sp
The following table lists Pistol’s native previewing support:
.TS
allbox tab(:);
lt lt.
T{
.sp
File/MIME Type
T}:T{
.sp
Notes on implementation
T}
T{
.sp
\f(CRtext/*\fP
T}:T{
.sp
Prints text files with syntax highlighting thanks to
.URL "https://github.com/alecthomas/chroma" "\f(CRchroma\fP" "."
T}
T{
.sp
Archives
T}:T{
.sp
Prints the contents of archive files using
.URL "https://github.com/mholt/archiver" "\f(CRarchiver\fP" "."
T}
.TE
.sp
.sp
In case Pistol encounters a MIME type it doesn\(cqt know how to handle
natively and you haven’t configured a program to handle it, it’ll print
a general description of the file type it encountered. For example, the
preview for an executable might be:
.sp
.if n .RS 4
.nf
.fam C
ELF 64\-bit LSB executable, x86\-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld\-linux\-x86\-64.so.2, BuildID[sha1]=a34861a1ae5358dc1079bc239df9dfe4830a8403, for GNU/Linux 3.2.0, not stripped
.fam
.fi
.if n .RE
.sp
This feature is available out of the box just like the previews for the
common mime types mentioned above.
.SH "USAGE"
.sp
.if n .RS 4
.nf
.fam C
$ pistol \-\-help
Usage: pistol OPTIONS <file> [<extras> ...]

OPTIONS

\-V, \-\-version               Print version date and exit
\-c, \-\-config <config file>  configuration file to use (defaults to ~/.config/pistol/pistol.conf on Linux)
\-h, \-\-help                  print help and exit

ARGUMENTS

file                        the file to preview
extras                      extra arguments passed to the command
.fam
.fi
.if n .RE
.SS "Integrations"
.SS "Ranger / Lf"
.sp
You can use Pistol as a file previewer in
.URL "https://ranger.github.io/" "Ranger" ""
and
.URL "https://github.com/gokcehan/lf" "Lf" "."
For Ranger, set your
\f(CRpreview_script\fP in your \f(CRrc.conf\fP as follows:
.sp
.if n .RS 4
.nf
.fam C
set preview_script ~/.go/bin/pistol
.fam
.fi
.if n .RE
.sp
The same goes for Lf, but in \f(CRlfrc\fP:
.sp
.if n .RS 4
.nf
.fam C
set previewer ~/.go/bin/pistol
.fam
.fi
.if n .RE
.SS "fzf"
.sp
If you use \c
.URL "https://github.com/junegunn/fzf" "fzf" ""
to search for files, you
can tell it to use \f(CRpistol\fP as the previewer. For example, the following
command edits with your \f(CR$EDITOR\fP selected python file(s) using \f(CRpistol\fP
as a previewer:
.sp
.if n .RS 4
.nf
.fam C
$EDITOR "$(find \-name \*(Aq*.py\*(Aq | fzf \-\-preview=\*(Aqpistol {}\*(Aq)"
.fam
.fi
.if n .RE
.SH "CONFIGURATION"
.sp
Although Pistol previews files of certain MIME types by default, it
doesn\(cqt force you to use these internal previewers for these MIME types.
You can change this behaviour by writing a configuration file in
\f(CR~/.config/pistol/pistol.conf\fP (or \f(CR$XDG_CONFIG_HOME/pistol/pistol.conf\fP) On
GNU systems, with the syntax as explained below.
.if n .sp
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
.B Note
.ps -1
.br
.sp
On OS X, this location defaults to:
\f(CR~/Library/Preferences/pistol/pistol.conf\fP, as the XDG specification imposes.
.sp .5v
.RE
.SS "Syntax"
.sp
You can configure preview commands according to file path or mime type
regex. The 1st word may is always interpreted first as a mime type regex
such as: \f(CRtext/*\fP.
.sp
If a line is not matched but the 1st word is exactly \f(CRfpath\fP, then the
2nd argument is interpreted as a file path regex, such as:
\f(CR/var/src/.*/README.md\fP.
.sp
On every line, whether you used \f(CRfpath\fP or not, the next arguments are
the command’s arguments, where \f(CR%pistol\-filename%\fP is substituted by
\f(CRpistol\fP to the file at question. You’ll see more examples in the
following sections.
.sp
Both regular expressions (for file paths and for mime types) are
interpreted by the \c
.URL "https://golang.org/pkg/regexp/#Match" "built\-in
library’s \f(CRregexp.match\fP" . Please refer to
.URL "https://golang.org/pkg/regexp/syntax" "this link" ""
for the full reference
regarding syntax.
.SS "Matching Mime Types"
.sp
You can inspect the MIME type of any file on a GNU/Linux OS and on Mac
OS with the command \f(CRfile \-\-mime\-type <file>\fP.
.sp
For example, say you wish to replace Pistol’s internal text previewer
with that of \c
.URL "https://github.com/sharkdp/bat" "bat" "’s,"
you’d put the
following in your \f(CRpistol.conf\fP:
.sp
.if n .RS 4
.nf
.fam C
text/* bat \-\-paging=never \-\-color=always %pistol\-filename%
.fam
.fi
.if n .RE
.sp
Naturally, your configuration file overrides the internal previewers.
.sp
Here’s another example which features \c
.URL "http://w3m.sourceforge.net/" "w3m"
as an HTML previewer:
.sp
.if n .RS 4
.nf
.fam C
text/html w3m \-T text/html \-dump %pistol\-filename%
.fam
.fi
.if n .RE
.sp
And here’s an example that leverages \f(CRls\fP for printing directories’
contents:
.sp
.if n .RS 4
.nf
.fam C
inode/directory ls \-l \-\-color %pistol\-filename%
.fam
.fi
.if n .RE
.SS "Matching File Path"
.sp
For example, say you wish to preview all files that reside in a certain
\f(CR./bin\fP directory with \c
.URL "https://github.com/sharkdp/bat" "bat" "’s"
syntax
highlighting for bash. You could use:
.sp
.if n .RS 4
.nf
.fam C
fpath /var/src/my\-bash\-project/bin/[^/]+$ bat \-\-map\-syntax :bash \-\-paging=never \-\-color=always %pistol\-filename%
.fam
.fi
.if n .RE
.SS "A Note on RegEx matching"
.sp
When Pistol parses your configuration file, as soon as it finds a match
be it a file path match or a mime type match, it stops parsing it and it
invokes the command written on the rest of the line. Therefor, if you
wish to use the examples from above which use \f(CRw3m\fP and \f(CRbat\fP, you’ll
need to put \f(CRw3m\fP’s line \fBbefore\fP \f(CRbat\fP’s line. Since otherwise,
\f(CRtext/*\fP will be matched first and \f(CRtext/html\fP won’t be checked at all.
.sp
Similarly, you’d probably want to put \f(CRfpath\fP lines at the top.
.sp
Of course that this is a mere example, the same may apply to any regular
expressions you’d choose to match against.
.sp
For a list of the internal regular expressions tested against when
Pistol reverts to it’s native previewers, read the file
.URL "https://github.com/doronbehar/pistol/blob/master/internal_writers/map.go#L8\-L12" "\f(CRinternal_writers/map.go\fP" "."
.sp
More examples can be found in
\c
.URL "https://github.com/doronbehar/pistol/wiki/Config\-examples" "this WiKi
page" .
.SS "Quoting and Shell Piping"
.sp
Pistol is pretty dumb when it parses your config, it splits all line by
spaces, meaning that e.g:
.sp
.if n .RS 4
.nf
.fam C
application/json jq \*(Aq.\*(Aq %pistol\-filename%
.fam
.fi
.if n .RE
.sp
This will result in an error by \c
.URL "https://github.com/stedolan/jq" "\f(CRjq\fP" ":"
.sp
.if n .RS 4
.nf
.fam C
jq: error: syntax error, unexpected INVALID_CHARACTER, expecting $end (Unix shell quoting issues?) at <top\-level>, line 1:
\*(Aq.\*(Aq
jq: 1 compile error
.fam
.fi
.if n .RE
.sp
Indicating that \f(CRjq\fP got a literal \f(CR\*(Aq.\*(Aq\fP. When you run in your shell
\f(CRjq \*(Aq.\*(Aq file.json\fP you don’t get an error because your shell is
stripping the quotes around \f(CR.\fP. However, Pistol is not smarter then
your shell because if you’d try for example:
.sp
.if n .RS 4
.nf
.fam C
application/json jq \*(Aq.[] | .\*(Aq %pistol\-filename%
.fam
.fi
.if n .RE
.sp
That would be equivalent to running in the typical shell:
.sp
.if n .RS 4
.nf
.fam C
jq "\(rs\*(Aq.[]" "|" ".\*(Aq" file.json
.fam
.fi
.if n .RE
.sp
That’s because Pistol doesn\(cqt consider your quotes as interesting
instructions, it just splits words by spaces. Hence, to overcome this
disability, you can use:
.sp
.if n .RS 4
.nf
.fam C
application/json sh: jq \*(Aq.\*(Aq %pistol\-filename%
.fam
.fi
.if n .RE
.sp
Thanks to the \f(CRsh:\fP keyword at the beginning of the command’s
definition, the rest of the line goes straight as a single argument to
\f(CRsh \-c\fP.
.sp
You can worry not about quoting / escaping the rest of the line \- it’s
not like when you run e.g \f(CRsh \-c \*(Aqcommand\*(Aq\fP in your shell where you need
to make sure single quotes are escaped or not used at all inside
\f(CRcommand\fP.
.sp
More over, with \f(CRsh:\fP you can use shell pipes:
.sp
.if n .RS 4
.nf
.fam C
fpath .*.md$ sh: bat \-\-paging=never \-\-color=always %pistol\-filename% | head \-8
.fam
.fi
.if n .RE
.SS "Passing arbitrary extra arguments to commands"
.sp
Pistol is capable of passing extra arguments to commands if the config says so.
The arguments \f(CR%pistol\-extra0%\fP, \f(CR%pistol\-extra1%\fP and so on, are substituted
by the extra arguments given to \f(CRpistol\fP, if these present in invocation and if
they are present in the config. Example usage:
.sp
With this config:
.sp
.if n .RS 4
.nf
.fam C
fpath /problematic\-bz2/.*.bz2 bzip2 %pistol\-filename% %pistol\-extra0%
fpath /working\-bz2/.*.bz2     bzip2 %pistol\-filename%
.fam
.fi
.if n .RE
.sp
Running:
.sp
.if n .RS 4
.nf
.fam C
pistol /problematic\-bz2/example.bz2 \-\-test
.fam
.fi
.if n .RE
.sp
Will run bzip2 while testing the integrity of the compressed file. However,
running:
.sp
.if n .RS 4
.nf
.fam C
pistol /working\-bz2/example.bz2 \-\-test
.fam
.fi
.if n .RE
.sp
Will not pass the \f(CR\-\-test\fP argument to \f(CRbzip\fP, due to \f(CR%pistol\-extra0\fP not
present in the config for the files at \f(CR/working\-bz2\fP. This feature is mainly
present for usage with \c
.URL "https://github.com/gokcehan/lf" "Lf" ""
and
.URL "https://ranger.github.io/" "Ranger" ""
which can pass width height and x, y
coordinates for image previews.
.sp
Here\(cqs an example usage for image previews that works with Lf:
[1]
.sp
.if n .RS 4
.nf
.fam C
image/.* pv %pistol\-filename% %pistol\-extra0% %pistol\-extra1% %pistol\-extra2% %pistol\-extra3%
.fam
.fi
.if n .RE
.SS "Environmental Variables"
.sp
Pistol’s internal previewer for text files includes syntax highlighting
thanks to the Go library \c
.URL "https://github.com/alecthomas/chroma" "chroma" "."
You can customize Pistol’s syntax highlighting formatting and style
through environmental variables.
.SS "Chroma Formatters"
.sp
The term \fIformatter\fP refers to the way the given file is presented in
the terminal. These include:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
\f(CRterminal\fP: The default formatter that uses terminal control codes to
change colors between every key word. This formatter has 8 colors and
it’s the default.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
\f(CRterminal256\fP: Same as \f(CRterminal\fP but with 256 colors available.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
\f(CRterminal16m\fP: Same as \f(CRterminal\fP but with 24 Bits colors i.e
True\-Color.
.RE
.sp
Other formatters include \f(CRjson\fP, and \f(CRhtml\fP but I’d be surprised if
you’ll find them useful for Pistol’s purpose.
.sp
To tell Pistol to use a specific formatter, set
\f(CRPISTOL_CHROMA_FORMATTER\fP in your environment, e.g:
.sp
.if n .RS 4
.nf
.fam C
export PISTOL_CHROMA_FORMATTER=terminal16m
.fam
.fi
.if n .RE
.sp
Recent versions of \c
.URL "https://github.com/gokcehan/lf" "Lf" ""
support
.URL "https://github.com/gokcehan/lf/pull/93" "256 colors" ""
in it’s preview
window. AFAIK, [2], \c
.URL "https://ranger.github.io/" "Ranger" ""
supports 8
colors and Lf’s \f(CRcolor256\fP isn\(cqt enabled by default.
.sp
Therefor, I decided that it’ll be best to keep this variable unset in
your general environment. If you do set \f(CRcolor256\fP in your \f(CRlfrc\fP, you
may feel free to set \f(CRPISTOL_CHROMA_FORMATTER\fP in your environment.
.SS "Chroma Styles"
.sp
The term \fIstyle\fP refers to the set of colors used to print a given file.
The chroma project documents all styles
.URL "https://xyproto.github.io/splash/docs/all.html" "here" ""
and
.URL "https://xyproto.github.io/splash/docs/longer/all.html" "here" "."
.sp
The default style used by Pistol is \f(CRpygments\fP. To tell Pistol to use a
specific style set \f(CRPISTOL_CHROMA_STYLE\fP in your environment, e.g:
.sp
.if n .RS 4
.nf
.fam C
export PISTOL_CHROMA_STYLE=monokai
.fam
.fi
.if n .RE
.SH "DEBUGGING"
.sp
Can’t figure out way does Pistol acts the way he does? You can run
pistol with:
.sp
.if n .RS 4
.nf
.fam C
env PISTOL_DEBUG=1 pistol test\-file
.fam
.fi
.if n .RE
.sp
And you should be able to see messages that may give you a clue.
.SH "NEWS"
.sp
See \c
.URL "https://github.com/doronbehar/pistol/releases" "previous releases" "."
.SH "NOTES"
.IP [1]
\f(CRpv\fP script refers to \c
.URL "https://github.com/neeshy/lfimg/blob/e9154721514a1384a89f2713092c15dc77992f37/pv" "this script" "."
.IP [2]
I don’t use Ranger anymore, ever since I moved to Lf. If you have evidence it does support 256 colors, let me know and I’ll change the default.