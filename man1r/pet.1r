.TH pet : CLI Snippet Manager
.PP
[GitHub release](https://img.shields.io/github/release/knqyf263/pet.svg) \[la]https://github.com/knqyf263/pet/releases/latest\[ra]
[MIT License](http://img.shields.io/badge/license\-MIT\-blue.svg?style=flat) \[la]https://github.com/knqyf263/pet/blob/master/LICENSE\[ra]
.PP
<img src="doc/logo.png" width="150">
.PP
Simple command\-line snippet manager, written in Go
.PP
<img src="doc/pet01.gif" width="700">
.PP
You can use variables (\fB\fC<param>\fR or \fB\fC<param=default_value>\fR ) in snippets.
.PP
<img src="doc/pet08.gif" width="700">
.SH Abstract
.PP
\fB\fCpet\fR is written in Go, and therefore you can just grab the binary releases and drop it in your $PATH.
.PP
\fB\fCpet\fR is a simple command\-line snippet manager (inspired by memo \[la]https://github.com/mattn/memo\[ra]).
I always forget commands that I rarely use. Moreover, it is difficult to search them from shell history. There are many similar commands, but they are all different.
.PP
e.g. 
\- \fB\fC$ awk \-F, 'NR <=2 {print $0}; NR >= 5 && NR <= 10 {print $0}' company.csv\fR (What I am looking for)
\- \fB\fC$ awk \-F, '$0 !~ "DNS|Protocol" {print $0}' packet.csv\fR
\- \fB\fC$ awk \-F, '{print $0} {if((NR\-1) % 5 == 0) {print "\-\-\-\-\-\-\-\-\-\-"}}' test.csv\fR
.PP
In the above case, I search by \fB\fCawk\fR from shell history, but many commands hit.
.PP
Even if I register an alias, I forget the name of alias (because I rarely use that command).
.PP
So I made it possible to register snippets with description and search them easily.
.SH TOC
.RS
.IP \(bu 2
Main features \[la]#main-features\[ra]
.IP \(bu 2
Examples \[la]#examples\[ra]
.RS
.IP \(bu 2
Register the previous command easily \[la]#register-the-previous-command-easily\[ra]
.RS
.IP \(bu 2
bash \[la]#bash-prev-function\[ra]
.IP \(bu 2
zsh \[la]#zsh-prev-function\[ra]
.IP \(bu 2
fish \[la]#fish\[ra]
.RE
.IP \(bu 2
Select snippets at the current line (like C\-r) \[la]#select-snippets-at-the-current-line-like-c-r\[ra]
.RS
.IP \(bu 2
bash \[la]#bash\[ra]
.IP \(bu 2
zsh \[la]#zsh\[ra]
.IP \(bu 2
fish \[la]#fish-1\[ra]
.RE
.IP \(bu 2
Copy snippets to clipboard \[la]#copy-snippets-to-clipboard\[ra]
.RE
.IP \(bu 2
Features \[la]#features\[ra]
.RS
.IP \(bu 2
Edit snippets \[la]#edit-snippets\[ra]
.IP \(bu 2
Sync snippets \[la]#sync-snippets\[ra]
.RE
.IP \(bu 2
Hands\-on Tutorial \[la]#hands-on-tutorial\[ra]
.IP \(bu 2
Usage \[la]#usage\[ra]
.IP \(bu 2
Snippet \[la]#snippet\[ra]
.IP \(bu 2
Configuration \[la]#configuration\[ra]
.RS
.IP \(bu 2
Selector option \[la]#selector-option\[ra]
.IP \(bu 2
Tag \[la]#tag\[ra]
.IP \(bu 2
Sync \[la]#sync\[ra]
.IP \(bu 2
Auto Sync \[la]#auto-sync\[ra]
.RE
.IP \(bu 2
Installation \[la]#installation\[ra]
.RS
.IP \(bu 2
Binary \[la]#binary\[ra]
.IP \(bu 2
Mac OS X / Homebrew \[la]#mac-os-x--homebrew\[ra]
.IP \(bu 2
RedHat, CentOS \[la]#redhat-centos\[ra]
.IP \(bu 2
Debian, Ubuntu \[la]#debian-ubuntu\[ra]
.IP \(bu 2
Archlinux \[la]#archlinux\[ra]
.IP \(bu 2
Build \[la]#build\[ra]
.RE
.IP \(bu 2
Migration \[la]#migration\[ra]
.IP \(bu 2
Contribute \[la]#contribute\[ra]
.RE
.SH Main features
.PP
\fB\fCpet\fR has the following features.
.RS
.IP \(bu 2
Register your command snippets easily.
.IP \(bu 2
Use variables in snippets.
.IP \(bu 2
Search snippets interactively.
.IP \(bu 2
Run snippets directly.
.IP \(bu 2
Edit snippets easily (config is just a TOML file).
.IP \(bu 2
Sync snippets via Gist or GitLab Snippets automatically.
.RE
.SH Examples
.PP
Some examples are shown below.
.SH Register the previous command easily
.PP
By adding the following config to \fB\fC\&.bashrc\fR or \fB\fC\&.zshrc\fR, you can easily register the previous command.
.SS bash prev function
.PP
.RS
.nf
function prev() {
  PREV=$(echo `history | tail \-n2 | head \-n1` | sed 's/[0\-9]* //')
  sh \-c "pet new `printf %q "$PREV"`"
}
.fi
.RE
.SS zsh prev function
.PP
.RS
.nf
$ cat .zshrc
function prev() {
  PREV=$(fc \-lrn | head \-n 1)
  sh \-c "pet new `printf %q "$PREV"`"
}
.fi
.RE
.SS fish
.PP
See below for details.
.br
\[la]https://github.com/otms61/fish-pet\[ra]
.PP
<img src="doc/pet02.gif" width="700">
.SH Select snippets at the current line (like C\-r)
.SS bash
.PP
By adding the following config to \fB\fC\&.bashrc\fR, you can search snippets and output on the shell.
.PP
.RS
.nf
$ cat .bashrc
function pet\-select() {
  BUFFER=$(pet search \-\-query "$READLINE_LINE")
  READLINE_LINE=$BUFFER
  READLINE_POINT=${#BUFFER}
}
bind \-x '"\\C\-x\\C\-r": pet\-select'
.fi
.RE
.SS zsh
.PP
.RS
.nf
$ cat .zshrc
function pet\-select() {
  BUFFER=$(pet search \-\-query "$LBUFFER")
  CURSOR=$#BUFFER
  zle redisplay
}
zle \-N pet\-select
stty \-ixon
bindkey '^s' pet\-select
.fi
.RE
.SS fish
.PP
See below for details.
.br
\[la]https://github.com/otms61/fish-pet\[ra]
.PP
<img src="doc/pet03.gif" width="700">
.SH Copy snippets to clipboard
.PP
By using \fB\fCpbcopy\fR on OS X, you can copy snippets to clipboard.
.PP
<img src="doc/pet06.gif" width="700">
.SH Features
.SH Edit snippets
.PP
The snippets are managed in the TOML file, so it's easy to edit.
.PP
<img src="doc/pet04.gif" width="700">
.SH Sync snippets
.PP
You can share snippets via Gist.
.PP
<img src="doc/pet05.gif" width="700">
.SH Hands\-on Tutorial
.PP
To experience \fB\fCpet\fR in action, try it out in this free O'Reilly Katacoda scenario, Pet, a CLI Snippet Manager \[la]https://katacoda.com/javajon/courses/kubernetes-tools/snippets-pet\[ra]\&. As an example, you'll see how \fB\fCpet\fR may enhance your productivity with the Kubernetes \fB\fCkubectl\fR tool. Explore how you can use \fB\fCpet\fR to curated a library of helpful snippets from the 800+ command variations with \fB\fCkubectl\fR\&.
.SH Usage
.PP
.RS
.nf
pet \- Simple command\-line snippet manager.

Usage:
  pet [command]

Available Commands:
  configure   Edit config file
  edit        Edit snippet file
  exec        Run the selected commands
  help        Help about any command
  list        Show all snippets
  new         Create a new snippet
  search      Search snippets
  sync        Sync snippets
  version     Print the version number

Flags:
      \-\-config string   config file (default is $HOME/.config/pet/config.toml)
      \-\-debug           debug mode

Use "pet [command] \-\-help" for more information about a command.
.fi
.RE
.SH Snippet
.PP
Run \fB\fCpet edit\fR
.br
You can also register the output of command (but cannot search).
.PP
.RS
.nf
[[snippets]]
  command = "echo | openssl s_client \-connect example.com:443 2>/dev/null |openssl x509 \-dates \-noout"
  description = "Show expiration date of SSL certificate"
  output = """
notBefore=Nov  3 00:00:00 2015 GMT
notAfter=Nov 28 12:00:00 2018 GMT"""
.fi
.RE
.PP
Run \fB\fCpet list\fR
.PP
.RS
.nf
    Command: echo | openssl s_client \-connect example.com:443 2>/dev/null |openssl x509 \-dates \-noout
Description: Show expiration date of SSL certificate
     Output: notBefore=Nov  3 00:00:00 2015 GMT
             notAfter=Nov 28 12:00:00 2018 GMT
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.fi
.RE
.SH Configuration
.PP
Run \fB\fCpet configure\fR
.PP
.RS
.nf
[General]
  snippetfile = "path/to/snippet" # specify snippet directory
  editor = "vim"                  # your favorite text editor
  column = 40                     # column size for list command
  selectcmd = "fzf"               # selector command for edit command (fzf or peco)
  backend = "gist"                # specify backend service to sync snippets (gist or gitlab, default: gist)
  sortby  = "description"         # specify how snippets get sorted (recency (default), \-recency, description, \-description, command, \-command, output, \-output)

[Gist]
  file_name = "pet\-snippet.toml"  # specify gist file name
  access_token = ""               # your access token
  gist_id = ""                    # Gist ID
  public = false                  # public or priate
  auto_sync = false               # sync automatically when editing snippets

[GitLab]
  file_name = "pet\-snippet.toml"  # specify GitLab Snippets file name
  access_token = "XXXXXXXXXXXXX"  # your access token
  id = ""                         # GitLab Snippets ID
  visibility = "private"          # public or internal or private
  auto_sync = false               # sync automatically when editing snippets
.fi
.RE
.SH Selector option
.PP
Example1: Change layout (bottom up)
.PP
.RS
.nf
$ pet configure
[General]
\&...
  selectcmd = "fzf"
\&...
.fi
.RE
.PP
Example2: Enable colorized output
\fB\fC
$ pet configure
[General]
\&...
  selectcmd = "fzf \-\-ansi"
\&...
$ pet search \-\-color
\fR
.SH Tag
.PP
You can use tags (delimiter: space).
\fB\fC
$ pet new \-t
Command> ping 8.8.8.8
Description> ping
Tag> network google
\fR
.PP
Or edit manually.
\fB\fC
$ pet edit
[[snippets]]
  description = "ping"
  command = "ping 8.8.8.8"
  tag = ["network", "google"]
  output = ""
\fR
.PP
They are displayed with snippets.
\fB\fC
$ pet search
[ping]: ping 8.8.8.8 #network #google
\fR
.PP
You can exec snipet with filtering the tag
.PP
.RS
.nf
$ pet exec \-t google

[ping]: ping 8.8.8.8 #network #google
.fi
.RE
.SH Sync
.SS Gist
.PP
You must obtain access token.
Go \[la]https://github.com/settings/tokens/new\[ra] and create access token (only need "gist" scope).
Set that to \fB\fCaccess_token\fR in \fB\fC[Gist]\fR or use an environment variable with the name \fB\fC$PET_GITHUB_ACCESS_TOKEN\fR\&.
.PP
After setting, you can upload snippets to Gist.
.br
If \fB\fCgist_id\fR is not set, new gist will be created.
\fB\fC
$ pet sync
Gist ID: 1cedddf4e06d1170bf0c5612fb31a758
Upload success
\fR
.PP
Set \fB\fCGist ID\fR to \fB\fCgist_id\fR in \fB\fC[Gist]\fR\&.
\fB\fCpet sync\fR compares the local file and gist with the update date and automatically download or upload.
.PP
If the local file is older than gist, \fB\fCpet sync\fR download snippets.
\fB\fC
$ pet sync
Download success
\fR
.PP
If gist is older than the local file, \fB\fCpet sync\fR upload snippets.
\fB\fC
$ pet sync
Upload success
\fR
.PP
\fINote: \fB\fC\-u\fR option is deprecated\fP
.SS GitLab Snippets
.PP
You must obtain access token.
Go \[la]https://gitlab.com/profile/personal_access_tokens\[ra] and create access token.
Set that to \fB\fCaccess_token\fR in \fB\fC[GitLab]\fR or use an environment variable with the name \fB\fC$PET_GITLAB_ACCESS_TOKEN\fR\&..
.PP
After setting, you can upload snippets to GitLab Snippets.
If \fB\fCid\fR is not set, new snippet will be created.
\fB\fC
$ pet sync
GitLab Snippet ID: 12345678
Upload success
\fR
.PP
Set \fB\fCGitLab Snippet ID\fR to \fB\fCid\fR in \fB\fC[GitLab]\fR\&.
\fB\fCpet sync\fR compares the local file and gitlab with the update date and automatically download or upload.
.PP
If the local file is older than gitlab, \fB\fCpet sync\fR download snippets.
\fB\fC
$ pet sync
Download success
\fR
.PP
If gitlab is older than the local file, \fB\fCpet sync\fR upload snippets.
\fB\fC
$ pet sync
Upload success
\fR
.SH Auto Sync
.PP
You can sync snippets automatically.
Set \fB\fCtrue\fR to \fB\fCauto_sync\fR in \fB\fC[Gist]\fR or \fB\fC[GitLab]\fR\&.
Then, your snippets sync automatically when \fB\fCpet new\fR or \fB\fCpet edit\fR\&.
.PP
.RS
.nf
$ pet edit
Getting Gist...
Updating Gist...
Upload success
.fi
.RE
.SH Installation
.PP
You need to install selector command (fzf \[la]https://github.com/junegunn/fzf\[ra] or peco \[la]https://github.com/peco/peco\[ra]).
.br
\fB\fChomebrew\fR install \fB\fCfzf\fR automatically.
.SH Binary
.PP
Go to the releases page \[la]https://github.com/knqyf263/pet/releases\[ra], find the version you want, and download the zip file. Unpack the zip file, and put the binary to somewhere you want (on UNIX\-y systems, /usr/local/bin or the like). Make sure it has execution bits turned on. 
.SH Mac OS X / Homebrew
.PP
You can use homebrew on OS X.
\fB\fC
$ brew install knqyf263/pet/pet
\fR
.PP
If you receive an error (\fB\fCError: knqyf263/pet/pet 64 already installed\fR) during \fB\fCbrew upgrade\fR, try the following command
.PP
.RS
.nf
$ brew unlink pet && brew uninstall pet
($ rm \-rf /usr/local/Cellar/pet/64)
$ brew install knqyf263/pet/pet
.fi
.RE
.SH RedHat, CentOS
.PP
Download rpm package from the releases page \[la]https://github.com/knqyf263/pet/releases\[ra]
\fB\fC
$ sudo rpm \-ivh https://github.com/knqyf263/pet/releases/download/v0.3.0/pet_0.3.0_linux_amd64.rpm
\fR
.SH Debian, Ubuntu
.PP
Download deb package from the releases page \[la]https://github.com/knqyf263/pet/releases\[ra]
\fB\fC
$ wget https://github.com/knqyf263/pet/releases/download/v0.3.6/pet_0.3.6_linux_amd64.deb
dpkg \-i pet_0.3.6_linux_amd64.deb
\fR
.SH Archlinux
.PP
Two packages are available in AUR \[la]https://wiki.archlinux.org/index.php/Arch_User_Repository\[ra]\&.
You can install the package from source \[la]https://aur.archlinux.org/packages/pet-git\[ra]:
\fB\fC
$ yaourt \-S pet\-git
\fR
Or from the binary \[la]https://aur.archlinux.org/packages/pet-bin\[ra]:
\fB\fC
$ yaourt \-S pet\-bin
\fR
.SH Build
.PP
.RS
.nf
$ mkdir \-p $GOPATH/src/github.com/knqyf263
$ cd $GOPATH/src/github.com/knqyf263
$ git clone https://github.com/knqyf263/pet.git
$ cd pet
$ make install
.fi
.RE
.SH Migration
.SH From Keep
.PP
\[la]https://blog.saltedbrain.org/2018/12/converting-keep-to-pet-snippets.html\[ra]
.SH Contribute
.nr step0 0 1
.RS
.IP \n+[step0]
fork a repository: github.com/knqyf263/pet to github.com/you/repo
.IP \n+[step0]
get original code: \fB\fCgo get github.com/knqyf263/pet\fR
.IP \n+[step0]
work on original code
.IP \n+[step0]
add remote to your repo: git remote add myfork \[la]https://github.com/you/repo.git\[ra]
.IP \n+[step0]
push your changes: git push myfork
.IP \n+[step0]
create a new Pull Request
.RE
.RS
.IP \(bu 2
see GitHub and Go: forking, pull requests, and go\-getting \[la]http://blog.campoy.cat/2014/03/github-and-go-forking-pull-requests-and.html\[ra]
.RE
.ti 0
\l'\n(.lu'
.SH License
.PP
MIT
.SH Author
.PP
Teppei Fukuda
